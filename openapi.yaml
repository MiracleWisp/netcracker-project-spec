openapi: 3.0.0
info:
  version: 1.0.0
  title: Example.com
  termsOfService: 'https://example.com/terms/'
  contact:
    email: contact@example.com
    url: 'http://example.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    This is an **example** API to demonstrate features of OpenAPI specification
    # Introduction
    This specification is intended to to be a good starting point for describing your API in 
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).
    It also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and 
    [ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond the standard OpenAPI syntax we use a few 
    [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: User
    description: Operations about user
  - name: Auth
    description: Регистрация и получение токена
  - name: Chats
    description: Взаимодействие с чатами
  - name: Chat Participants
    description: Управление участниками чата
  - name: Chat Playlist
    description: Управление плейлистом чата
  - name: Chat Messages
    description: Управление сообщениями чата
servers:
  - url: 'http://playmaker.gq:8080'
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: POST /auth/login
      description: Получить JWT
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: String
                  required: true
                  example: user
                password:
                  type: String
                  required: true
                  example: pwd
      responses:
        '200':
          headers:
            Authorization:
              schema:
                type: String
                example: Bearer eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJTaW1hYyIsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdLCJpYXQiOjE1NTUyNTk2OTMsImV4cCI6MTU1NTM0NjA5M30.QhpSea6RMjVKQoZeLjOMTvmuq6sZDOMONdzNWfRC57shIti4wVC5NKJR5P8dbMAMAoks4ikc7dtimFYNnzIl8ZFH9jL1Tzg5tUZM0vhR42stis3d8BqXWkKpPKQrvej3MP2tkTywlZZbIieoum-9raCZZufoGk6qQWOZSUYTS0CxH9cmSVFncqLdaczJ4WfmqQA0LkAz8ez9GJtHjZ5WylDR1pOsNQ70ydRWAI-QhVtEFNqpJgg_vPUN__x2H4giIz_M6YC2_fXG4rLS_lp4_0QmVMrPQ4uXo6rfsdBh4cGOcn8mOuu9Qh4X2Af8bWaFkVBkw1UK_SjmELmsv4KZlw
  /auth/signup:
    post:
      tags:
        - Auth
      summary: POST /auth/signup
      description: Регистрация нового пользователя
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: String
                  required: true
                  example: user
                password:
                  type: String
                  required: true
                  example: pwd
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: String
              example: User created
  /social/chats:
    get:
      tags:
        - Chats
      summary: GET /social/chats
      description: Получить список чатов текущего пользователя
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          ChatId: 1
                          chatName: Имя для чата
                          owner:
                            username: Simac
                      - type: object
                        example:
                          ChatId: 2
                          chatName: Имя для чата 2
                          owner:
                            username: Ira
    post:
      tags:
        - Chats
      summary: POST /social/chats
      description: Создание нового чата
      requestBody:
        content:
          application/json:
            schema:
              properties:
                chatName:
                  type: String
                  required: true
                  example: Имя для чата
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example:
                      ChatId: 2
                      chatName: Имя для чата
                      owner:
                        username: Simac
  '/social/chats/{chatId}/messages':
    parameters:
      - in: path
        name: chatId
        required: true
        schema:
          type: integer
    get:
      tags:
        - Chat Messages
      summary: 'GET /social/chats/{chatId}/messages'
      parameters:
        - in: query
          description: 'Unix time в миллисекундах, с которого нужно вернуть пачку сообщений'
          name: since
          required: true
          schema:
            type: long
      description: Получить список участников чата
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          messageId: 25
                          sender:
                            username: Simac
                          content: Привет
                          chat:
                            chatId: 2
                            chatName: Название для чата
                            owner:
                              username: Ira
                          sendTime: 1554315321762
                          type: CHAT
                      - type: object
                        example:
                          messageId: 24
                          sender:
                            username: Simac
                          content: Ira добавил(а) simac в чат
                          chat:
                            chatId: 2
                            chatName: Название для чата
                            owner:
                              username: Ira
                          sendTime: 1554315321761
                          type: CHAT
                      - type: object
                        example:
                          messageId: 23
                          sender:
                            username: Simac
                          content: Ira добавил(а) simac в чат
                          chat:
                            chatId: 2
                            chatName: Название для чата
                            owner:
                              username: Ira
                          sendTime: 1554315321760
                          type: JOIN
  '/social/chats/{chatId}/participants':
    parameters:
      - in: path
        name: chatId
        required: true
        schema:
          type: integer
    get:
      tags:
        - Chat Participants
      summary: 'GET /social/chats/{chatId}/participants'
      description: Получить список участников чата
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          username: Simac
                      - type: object
                        example:
                          username: Ira
    post:
      tags:
        - Chat Participants
      summary: 'POST /social/chats/{chatId}/participants'
      description: Добавить участника в чат. Возвращает обновленный список участников
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: String
                  required: true
                  example: Simac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          username: Simac
                      - type: object
                        example:
                          username: Ira
    delete:
      tags:
        - Chat Participants
      summary: 'DELETE /social/chats/{chatId}/participants'
      description: 'Удаляет участника из чата. Можно выйти самому, либо админ может удалить любого. Возвращает обновленный список участников'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: String
                  required: true
                  example: Simac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          username: Ira
  '/social/chats/{chatId}/playlist':
    parameters:
      - in: path
        name: chatId
        required: true
        schema:
          type: integer
    get:
      tags:
        - Chat Playlist
      summary: 'GET /social/chats/{chatId}/playlist'
      description: Получить список участников чата
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          username: Simac
                      - type: object
                        example:
                          username: Ira
    post:
      tags:
        - Chat Playlist
      summary: 'POST /social/chats/{chatId}/playlist'
      description: Добавить участника в чат. Возвращает обновленный список участников
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: String
                  required: true
                  example: Simac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          username: Simac
                      - type: object
                        example:
                          username: Ira
    delete:
      tags:
        - Chat Playlist
      summary: 'DELETE /social/chats/{chatId}/playlist'
      description: 'Удаляет участника из чата. Можно выйти самому, либо админ может удалить любого. Возвращает обновленный список участников'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: String
                  required: true
                  example: Simac
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  successful:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      - type: object
                        example:
                          username: Ira
  '/users/{username}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user by user name
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
